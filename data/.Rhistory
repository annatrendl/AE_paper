#and gives back the attention vector W
weighting <- function(w) {
#sample one attribute dimension and return an attention vector
which.attended <- sample.int(length(w),1,prob = w)
attention <- integer(length(w))
attention[which.attended] <- 1
return(attention)
}
#STEP 2: SIMULATE THE COMPARISON PROCESS ONCE
#write a function that takes in the subjective values, comaprison matrix, feedback matrix and threshold value
#and calculates the evolution of preferences until one of the preference vector entries reaches the threshold
#we'll need sampling probabilities for the weighting matrix
#we'll need a matrix with the subjective values for each option and attribute dimension M
#we'll need a comparison matrix C
#we'll need a feedback matrix S
#we'll need a threshold value theta
simulate.one.process <- function(M, C, W, S, theta) {
#set up an empty preference matrix
P <- integer(nrow(M))
#The process has to go on til one of the entries in P reaches theta
#create empty list for saving the history
mylist <- list()
#first element of the list is the starting value of P
mylist[[1]] <- P
#and filling up the list from the second list element
k <- 2
while (max(P) < theta) {
#sample new weight
W <- weighting(W)
#construct new valence
V <- C %*% M %*% W
#construct new preference
P <- S %*% P + V
mylist[[k]] <- t(P)
k <- k+1
}
#save the whole thing
history <- do.call(rbind, mylist)
list(winner = which.max(P), P.history = history, parameters = list(M=M, C=C, S=S, theta = theta))
}
theta <- 10
W <- c(0.5,0.5)
M <- matrix(c(1.0, 3.0, 3.2, 0.8, 3.0, 1.0), nrow=3, byrow=T)
C <- matrix(c(1,-0.5,-0.5,-0.5,1,-0.5,-0.5,-0.5,1), byrow = TRUE, nrow = 3)
S <- matrix(c(0.94, -0.025, -0.001,   -0.025, 0.94, -0.001,   -0.001, -0.001, 0.94),nrow=3, byrow=T)
plot.P.live <- function(s) {
par(new=F)
theta <- s$parameters$theta
t_decision <- max(200,dim(s$P.history)[1])
for(i in seq(dim(s$P.history)[1])) {
# Plot width: at least 200 time steps, more if required.
# Only plot if boundary not reached yet
Sys.sleep(.1)
matplot(t(s$P.history)[1:i,], type="l", ylab="Preference State", xlab="Time Step", ylim=c(-theta,theta), xlim=c(0,t_decision),lty=1, col=1:3)
abline(h=theta, lty=1)
legend(1,theta,legend=1:3, lty=1,col=1:3, bty="n")
}
}
s2 <- simulate.one.process(M = M, C = C, W = W, S = S, theta = theta)
plot.P.live(s2)
s2$P.history
load("F:/Anna_scraped_movies/example_quadruplets.RData")
View(K_choices)
library(beepr)
190/3
rm(list=ls())
library(RSelenium)
library(data.table)
shell('docker run -d -p 4445:4444 selenium/standalone-firefox')
remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4445L, browserName = "firefox")
remDr$open()
remDr$navigate("http://www.google.com/ncr")
remDr$getTitle()
remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4444L, browserName = "firefox")
remDr$open()
remDr$navigate("http://www.google.com/ncr")
remDr$getTitle()
rm(list=ls())
library(RSelenium)
library(data.table)
shell('docker run -d -p 4445:4444 selenium/standalone-firefox')
remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4444L, browserName = "firefox")
remDr$open()
remDr$navigate("http://www.google.com/ncr")
remDr$getTitle()
emDr <- remoteDriver(remoteServerAddr = "localhost", port = 4444L, browserName = "firefox")
remDr$open()
library(RSelenium)
library(rvest)
library(stringr)
rsDriver(port = 4444L, browser = 'chrome')
remDr <- remoteDriver(browser = 'chrome')
remDr$open()
remDr$navigate('http://www.codewars.com/kata')
chk <- FALSE
while(!chk){
webElem <- remDr$findElements("css", ".js-infinite-marker")
if(length(webElem) > 0L){
tryCatch(
remDr$executeScript("elem = arguments[0];
elem.scrollIntoView();
return true;", list(webElem[[1]])),
error = function(e){}
)
Sys.sleep(1L)
}else{
chk <- TRUE
}
}
rm(list=ls())
ibrary(RSelenium)
library(rvest)
library(stringr)
rsDriver(port = 4444L, browser = 'chrome')
remDr <- remoteDriver(browser = 'chrome')
remDr$open()
remDr$navigate('http://www.codewars.com/kata')
chk <- FALSE
while(!chk){
webElem <- remDr$findElements("css", ".js-infinite-marker")
if(length(webElem) > 0L){
tryCatch(
remDr$executeScript("elem = arguments[0];
elem.scrollIntoView();
return true;", list(webElem[[1]])),
error = function(e){}
)
Sys.sleep(1L)
}else{
chk <- TRUE
}
}
rm(list=ls())
ibrary(RSelenium)
library(rvest)
library(stringr)
#rsDriver(port = 4444L, browser = 'chrome')
remDr <- remoteDriver(browser = 'chrome')
remDr$open()
remDr$navigate('http://www.codewars.com/kata')
chk <- FALSE
while(!chk){
webElem <- remDr$findElements("css", ".js-infinite-marker")
if(length(webElem) > 0L){
tryCatch(
remDr$executeScript("elem = arguments[0];
elem.scrollIntoView();
return true;", list(webElem[[1]])),
error = function(e){}
)
Sys.sleep(1L)
}else{
chk <- TRUE
}
}
rm(list=ls())
ibrary(RSelenium)
library(rvest)
library(stringr)
#rsDriver(port = 4444L, browser = 'chrome')
remDr <- remoteDriver(browser = 'chrome')
remDr$open()
remDr$navigate('http://www.codewars.com/kata')
shell('docker pull selenium/standalone-firefox')
shell('docker run -d -p 4445:4444 selenium/standalone-firefox')
remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4445L, browserName = "firefox'")
160*7
160*7*4
160*7*58
25+17+5+11
36+8+8+5
7.5*36+7*4+6.5+6*4+5.5*8+4*5
58+8+27
58+6+7+7
58+6+7+7+11
58+8
58+8+6
58+8+6+7
58+8+6+7+11
58+8+6+7+8
455/1200
80+45+65
65/190
60*6.5
60*7*0.8
390-336
28/0.4
20*0.4
41.5-8
33.5/0.25
134+8
90*0.4
41.5-8
33.5/0.25
28/0.4
90*0.4+134*0.25*1.2
1650-1560
1453-1550
1565-1340
1720-1625
90/1560
225/1340
255/1400
95/1625
945-884
1750000*0.16+1000000*0.22
1750000*0.16
1750000*0.16
5*1.2-2.5*1.15
25*0.2
25*0.1*0.8
75+17+20
135/15
load("C:/Anna/Crimes/wm_supernew/Westmids_supernew.RData")
rm(list = ls())
#setwd("C:/Users/Anna/Desktop/crimes")
library(data.table)
library(lubridate)
library(ggplot2)
load("C:/Anna/Crimes/wm_supernew/worldcupeuro.RData")
load("C:/Anna/Crimes/wm_supernew/Westmids_supernew.RData")
load("C:/Anna/Crimes/wm_supernew/DA_ids.RData")
check <- unique(domestic_abuse[, c("crime_number", "ids", "datetime_first_committed")])
check <- check[order(datetime_first_committed)]
check <- check[order(ids, datetime_first_committed)]
check[, one.only := max(.N), .(ids)]
check[one.only > 1, how.many.before := 1:.N,.(ids)]
check[, how.many.before := how.many.before-1]
check[is.na(how.many.before), how.many.before := 0]
check[, when.committed := ymd(substring(as.character(datetime_first_committed),1,10))]
domestic_abuse <- merge(domestic_abuse, check[,c("crime_number", "how.many.before")], by = "crime_number",
all.x = T)
domestic_abuse[, when.committed := ymd(substring(as.character(datetime_first_committed),1,10))]
domestic_abuse <- domestic_abuse[role == "VICT", list(New = sum(how.many.before == 0),
Old = sum(how.many.before != 0)), .(when.committed,Alcohol_inv)]
domestic_abuse <- melt(domestic_abuse, id.vars = c("when.committed", "Alcohol_inv"), measure.vars = c("New", "Old"))
domestic_abuse
check
check[when.committed %in% unique(all_days[England_win == T,when.committed]), Type := "England_win"]
check[when.committed %in% unique(all_days[England_lost == T,when.committed]), Type := "England_lost"]
check[when.committed %in% unique(all_days[England_draw == T,when.committed]), Type := "England_draw"]
check[when.committed %in% unique(all_days[After_England == T,when.committed]), Type := "After_England"]
check[when.committed %in% unique(all_days[After_England == T,when.committed]) & is.na(Type), Type := "Tournament_on"]
check[is.na(Type), Type := "Nonmatch_day"]
check[,Type := factor(Type, levels = c("Nonmatch_day","Tournament_on", "England_win","England_draw",
"England_lost","After_England"))]
check[, month := month(datetime_first_committed, label = T)]
check[, day := day(datetime_first_committed)]
check[, when.committed := ymd(paste(year, month, day))]
check[, Day_of_week := wday(when.committed, label = T)]
check[, year := year(datetime_first_committed)]
check[, when.committed := ymd(paste(year, month, day))]
check[when.committed %in% unique(all_days[England_win == T,when.committed]), Type := "England_win"]
check[when.committed %in% unique(all_days[England_lost == T,when.committed]), Type := "England_lost"]
check[when.committed %in% unique(all_days[England_draw == T,when.committed]), Type := "England_draw"]
check[when.committed %in% unique(all_days[After_England == T,when.committed]), Type := "After_England"]
check[when.committed %in% unique(all_days[After_England == T,when.committed]) & is.na(Type), Type := "Tournament_on"]
check[is.na(Type), Type := "Nonmatch_day"]
check[,Type := factor(Type, levels = c("Nonmatch_day","Tournament_on", "England_win","England_draw",
"England_lost","After_England"))]
6+5*1.5
9+5*1.5
9+5*1.5+1.5
exp(0.53)
2148/135
93-74
72-19
72-55
8/100
a <- sum(c(45, 14,32,40,25,93,15,83))
t <- sum(c(15,43,24,46,21))
347-149
3750/5000
793/4435
40/4376
590+490
1080/5
5262/6000
6000/5262
294/6
415/8
416/8
1185/3
117/3
340/4
85*2
4500/4087
99+429
(99+429)/4
3700/3375
190+260+295
104+85+235+49
156+89+395
219+155+132
160+375
216+125+195
175+50+119+39+170
219+169+132
745*1.03+473*1.14+640*1.1+840+506*1.1+990+200
535*1.03+536*1.14+553*1.1+435+520*1.1+990+200
data("AirPassengers")
data(USArrests)
# Compute distances and hierarchical clustering
dd <- dist(scale(USArrests), method = "euclidean")
hc <- hclust(dd, method = "ward.D2")
USArrests
set.seed(2529)
D.ex <- rbinom(200, size = 1, prob = .5)
M1 <- rnorm(200, mean = D.ex, sd = .65)
M2 <- rnorm(200, mean = D.ex, sd = 1.5)
test <- data.frame(D = D.ex, D.str = c("Healthy", "Ill")[D.ex + 1],
M1 = M1, M2 = M2, stringsAsFactors = FALSE)
test
13.1094/3.8
3.8/13.1094
rm(list=ls())
library(data.table)
library(entropy)
setwd("C:/AE_paper/data")
load("step4_Prepare_choice_data_input.RData")
ratings <- trials[trial.type == "rating",]
ratings[, response := factor(response, levels = as.character(seq(1,7)))]
ratings[,freq:=.N,by=list(sub.id, response)]
check.outliers <- ratings[,list(expt.duration = sum(rt),
autocorr = acf(response, plot=FALSE)$acf[2],
H=entropy(table(response)), workerid = worker.id[1]), by = sub.id]
check.outliers[,too.fast := expt.duration < quantile(expt.duration,.05)] # Fastest 5%
check.outliers[,low.H := H < quantile(H,.05)] # Lowest entropy responses
check.outliers[,extreme.r1 := autocorr < quantile(autocorr,.05) | autocorr > quantile(autocorr,.95)] # Most and least autocorrelated 5%s
check.outliers[,outlier:= too.fast | low.H | extreme.r1] # Any of the above
check.outliers[outlier == TRUE, workerid]
setnames(trials, c("book.id", "book.no"), c("movie.id","movie.no"))
trials <- data.table(dcast(trials, sub.id + movie.id + worker.id ~ trial.type, value.var = "response"))
trials[, rating := as.numeric(rating)]
trials <- merge(trials, alldata[,c("Movie.id", "Title")], by.x = "movie.id", by.y = "Movie.id", all.x = TRUE)
#get prepared choice sets and similarity ratings for each subject
#keep only the ones we have choice data for
quadruplets_for_each <- quadruplets_for_each[worker.id %in% unique(choice_results$worker.id),]
#exactly twice as many as the triplets
#all I need to know is which one was chosen
triplets_A <- quadruplets_for_each[, c("worker.id" ,"Target_A_Title", "Target_B_Title", "Decoy_A_Title",
"Target_A_no","Target_B_no","Decoy_A_no",
"Target_A_id", "Target_B_id", "Decoy_A_id", "Target_A_rating",
"Target_B_rating","Decoy_A_rating", "Seen_all","Notseen_all",
"pair_A_mean", "pair_B_mean", "overall_sim")]
setnames(triplets_A, old = c("worker.id" ,"Target_A_Title", "Target_B_Title", "Decoy_A_Title",
"Target_A_no","Target_B_no","Decoy_A_no",
"Target_A_id", "Target_B_id", "Decoy_A_id", "Target_A_rating",
"Target_B_rating","Decoy_A_rating","Seen_all","Notseen_all",
"pair_A_mean", "pair_B_mean", "overall_sim"),
new = c("worker.id" ,"Target", "Competitor", "Decoy",
"Target_no","Competitor_no","Decoy_no",
"Target_id", "Competitor_id", "Decoy_id", "Target_rating",
"Competitor_rating","Decoy_rating","Allseen","Allnotseen",
"pair_A_mean", "pair_B_mean", "overall_sim")
)
triplets_B <- quadruplets_for_each[, c("worker.id" ,"Target_B_Title", "Target_A_Title", "Decoy_B_Title",
"Target_B_no","Target_A_no","Decoy_B_no",
"Target_B_id", "Target_A_id", "Decoy_B_id", "Target_B_rating",
"Target_A_rating","Decoy_B_rating","Seen_all","Notseen_all",
"pair_A_mean", "pair_B_mean", "overall_sim")]
setnames(triplets_B, old = c("worker.id" ,"Target_B_Title", "Target_A_Title", "Decoy_B_Title",
"Target_B_no","Target_A_no","Decoy_B_no",
"Target_B_id", "Target_A_id", "Decoy_B_id", "Target_B_rating",
"Target_A_rating","Decoy_B_rating","Seen_all","Notseen_all",
"pair_A_mean", "pair_B_mean", "overall_sim"),
new =c("worker.id" ,"Target", "Competitor", "Decoy",
"Target_no","Competitor_no","Decoy_no",
"Target_id", "Competitor_id", "Decoy_id", "Target_rating",
"Competitor_rating","Decoy_rating","Allseen","Allnotseen",
"pair_A_mean", "pair_B_mean", "overall_sim"))
triplets <- rbind(triplets_A, triplets_B)
triplets[, id := paste(sort(c(as.character(Target_id), as.character(Competitor_id),as.character(Decoy_id))),
collapse = " "),by = 1:nrow(triplets)]
#get id of chosen movie
choice_results[, id := paste(sort(c(as.character(left.book.id), as.character(middle.book.id),as.character(right.book.id))),
collapse = " "),by = 1:nrow(choice_results)]
choice_results[, Chosen_id := ifelse(response == "rightmovie", as.character(right.book.id), ifelse(response == "leftmovie",
as.character(left.book.id), as.character(middle.book.id))),by = 1:nrow(choice_results)]
triplets <- merge(triplets, choice_results[,c("worker.id", "id", "rt", "Chosen_id", "trial.no")], by = c("worker.id", "id"),
all.x = TRUE)
setnames(triplets, c("rt"), c("rt_choice"))
triplets[, Which.chosen := c("Target", "Competitor", "Decoy")[which(c(as.character(Target_id),as.character(Competitor_id),as.character(Decoy_id)) ==
as.character(Chosen_id))], by = 1:nrow(triplets)]
triplets[, id_comp := paste(sort(c(as.character(Target_id), as.character(Competitor_id))),
collapse = " "),by = 1:nrow(triplets)]
triplets[, id_dec := paste(sort(c(as.character(Target_id), as.character(Decoy_id))),
collapse = " "),by = 1:nrow(triplets)]
similarity_results[, id := paste(sort(c(as.character(left.book.id), as.character(right.book.id))),
collapse = " "),by = 1:nrow(similarity_results)]
similarity_results <- similarity_results[, list(rt = rt[1],
response = response[1]), by = list(id, worker.id)]
#there seems to be 358 similarity ratings overall
triplets <- merge(triplets, similarity_results[, c("worker.id", "response", "rt", "id")],
by.x = c("worker.id", "id_comp"), by.y = c("worker.id", "id"), all.x = TRUE)
setnames(triplets, c("response", "rt"), c("Similarity_comp", "rt_compsim"))
triplets <- merge(triplets, similarity_results[, c("worker.id", "response", "rt", "id")],
by.x = c("worker.id", "id_dec"), by.y = c("worker.id", "id"), all.x = TRUE)
setnames(triplets, c("response", "rt"), c("Similarity_dec", "rt_decsim"))
triplets <- triplets[,-c("id_dec", "id_comp", "id")]
triplets <- triplets[!is.na(Which.chosen), ]
triplets[, Targetchosen := ifelse(Which.chosen == "Target",1,0)]
exclusion_triplets <- triplets[worker.id %in% check.outliers[outlier == TRUE, workerid], ]
exclusion_triplets
exclusion_triplets[Which.chosen != "Decoy",]
exclusion_triplets[Which.chosen != "Decoy",.N, .(worker.id)]
check.outliers[outlier == TRUE, workerid]
unique(check.outliers[outlier == TRUE, workerid])
t.test(exclusion_choices_distr[,Target_prop], alternative = "greater", conf.level=0.95, mu = 0.5)
rm(list=ls())
library(data.table)
library(entropy)
setwd("C:/AE_paper/data")
load("step4_Prepare_choice_data_input.RData")
ratings <- trials[trial.type == "rating",]
ratings[, response := factor(response, levels = as.character(seq(1,7)))]
ratings[,freq:=.N,by=list(sub.id, response)]
check.outliers <- ratings[,list(expt.duration = sum(rt),
autocorr = acf(response, plot=FALSE)$acf[2],
H=entropy(table(response)), workerid = worker.id[1]), by = sub.id]
check.outliers[,too.fast := expt.duration < quantile(expt.duration,.05)] # Fastest 5%
check.outliers[,low.H := H < quantile(H,.05)] # Lowest entropy responses
check.outliers[,extreme.r1 := autocorr < quantile(autocorr,.05) | autocorr > quantile(autocorr,.95)] # Most and least autocorrelated 5%s
check.outliers[,outlier:= too.fast | low.H | extreme.r1] # Any of the above
check.outliers[outlier == TRUE, workerid]
setnames(trials, c("book.id", "book.no"), c("movie.id","movie.no"))
trials <- data.table(dcast(trials, sub.id + movie.id + worker.id ~ trial.type, value.var = "response"))
trials[, rating := as.numeric(rating)]
trials <- merge(trials, alldata[,c("Movie.id", "Title")], by.x = "movie.id", by.y = "Movie.id", all.x = TRUE)
#get prepared choice sets and similarity ratings for each subject
#keep only the ones we have choice data for
quadruplets_for_each <- quadruplets_for_each[worker.id %in% unique(choice_results$worker.id),]
#exactly twice as many as the triplets
#all I need to know is which one was chosen
triplets_A <- quadruplets_for_each[, c("worker.id" ,"Target_A_Title", "Target_B_Title", "Decoy_A_Title",
"Target_A_no","Target_B_no","Decoy_A_no",
"Target_A_id", "Target_B_id", "Decoy_A_id", "Target_A_rating",
"Target_B_rating","Decoy_A_rating", "Seen_all","Notseen_all",
"pair_A_mean", "pair_B_mean", "overall_sim")]
setnames(triplets_A, old = c("worker.id" ,"Target_A_Title", "Target_B_Title", "Decoy_A_Title",
"Target_A_no","Target_B_no","Decoy_A_no",
"Target_A_id", "Target_B_id", "Decoy_A_id", "Target_A_rating",
"Target_B_rating","Decoy_A_rating","Seen_all","Notseen_all",
"pair_A_mean", "pair_B_mean", "overall_sim"),
new = c("worker.id" ,"Target", "Competitor", "Decoy",
"Target_no","Competitor_no","Decoy_no",
"Target_id", "Competitor_id", "Decoy_id", "Target_rating",
"Competitor_rating","Decoy_rating","Allseen","Allnotseen",
"pair_A_mean", "pair_B_mean", "overall_sim")
)
triplets_B <- quadruplets_for_each[, c("worker.id" ,"Target_B_Title", "Target_A_Title", "Decoy_B_Title",
"Target_B_no","Target_A_no","Decoy_B_no",
"Target_B_id", "Target_A_id", "Decoy_B_id", "Target_B_rating",
"Target_A_rating","Decoy_B_rating","Seen_all","Notseen_all",
"pair_A_mean", "pair_B_mean", "overall_sim")]
setnames(triplets_B, old = c("worker.id" ,"Target_B_Title", "Target_A_Title", "Decoy_B_Title",
"Target_B_no","Target_A_no","Decoy_B_no",
"Target_B_id", "Target_A_id", "Decoy_B_id", "Target_B_rating",
"Target_A_rating","Decoy_B_rating","Seen_all","Notseen_all",
"pair_A_mean", "pair_B_mean", "overall_sim"),
new =c("worker.id" ,"Target", "Competitor", "Decoy",
"Target_no","Competitor_no","Decoy_no",
"Target_id", "Competitor_id", "Decoy_id", "Target_rating",
"Competitor_rating","Decoy_rating","Allseen","Allnotseen",
"pair_A_mean", "pair_B_mean", "overall_sim"))
triplets <- rbind(triplets_A, triplets_B)
triplets[, id := paste(sort(c(as.character(Target_id), as.character(Competitor_id),as.character(Decoy_id))),
collapse = " "),by = 1:nrow(triplets)]
#get id of chosen movie
choice_results[, id := paste(sort(c(as.character(left.book.id), as.character(middle.book.id),as.character(right.book.id))),
collapse = " "),by = 1:nrow(choice_results)]
choice_results[, Chosen_id := ifelse(response == "rightmovie", as.character(right.book.id), ifelse(response == "leftmovie",
as.character(left.book.id), as.character(middle.book.id))),by = 1:nrow(choice_results)]
triplets <- merge(triplets, choice_results[,c("worker.id", "id", "rt", "Chosen_id", "trial.no")], by = c("worker.id", "id"),
all.x = TRUE)
setnames(triplets, c("rt"), c("rt_choice"))
triplets[, Which.chosen := c("Target", "Competitor", "Decoy")[which(c(as.character(Target_id),as.character(Competitor_id),as.character(Decoy_id)) ==
as.character(Chosen_id))], by = 1:nrow(triplets)]
triplets[, id_comp := paste(sort(c(as.character(Target_id), as.character(Competitor_id))),
collapse = " "),by = 1:nrow(triplets)]
triplets[, id_dec := paste(sort(c(as.character(Target_id), as.character(Decoy_id))),
collapse = " "),by = 1:nrow(triplets)]
similarity_results[, id := paste(sort(c(as.character(left.book.id), as.character(right.book.id))),
collapse = " "),by = 1:nrow(similarity_results)]
similarity_results <- similarity_results[, list(rt = rt[1],
response = response[1]), by = list(id, worker.id)]
#there seems to be 358 similarity ratings overall
triplets <- merge(triplets, similarity_results[, c("worker.id", "response", "rt", "id")],
by.x = c("worker.id", "id_comp"), by.y = c("worker.id", "id"), all.x = TRUE)
setnames(triplets, c("response", "rt"), c("Similarity_comp", "rt_compsim"))
triplets <- merge(triplets, similarity_results[, c("worker.id", "response", "rt", "id")],
by.x = c("worker.id", "id_dec"), by.y = c("worker.id", "id"), all.x = TRUE)
setnames(triplets, c("response", "rt"), c("Similarity_dec", "rt_decsim"))
triplets <- triplets[,-c("id_dec", "id_comp", "id")]
triplets <- triplets[!is.na(Which.chosen), ]
triplets[, Targetchosen := ifelse(Which.chosen == "Target",1,0)]
exclusion_triplets <- triplets[worker.id %in% check.outliers[outlier == TRUE, workerid], ]
nonexclusion_triplets <- triplets[worker.id %in% check.outliers[outlier == FALSE, workerid], ]
exclusion_choices_distr <- exclusion_triplets[Which.chosen != "Decoy", list(Target_prop =sum(Targetchosen)/.N,
No.choices = .N),by = worker.id]
nonexclusion_choices_distr <- nonexclusion_triplets[Which.chosen != "Decoy", list(Target_prop =sum(Targetchosen)/.N,
No.choices = .N),by = worker.id]
t.test(exclusion_choices_distr[,Target_prop], alternative = "greater", conf.level=0.95, mu = 0.5)
t.test(nonexclusion_choices_distr[,Target_prop], alternative = "greater", conf.level=0.95, mu = 0.5)
round(-0.43753,2)
round(-0.71315)
round(-0.71315,1)
round(-0.71315,2)
round(0.757)
round(0.757,2)
round(0.757,3)
t.test(exclusion_choices_distr[,Target_prop], alternative = "greater", conf.level=0.95, mu = 0.5)
